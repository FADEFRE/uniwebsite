variables:
  CI_REGISTRY_1_IMAGE_1: docker.io/fadefre824/swtp202312
  CI_REGISTRY_1: https://index.docker.io/v1/
  CI_REGISTRY_1_PASSWORD: h2#0!87tZh8027hF
  CI_REGISTRY_1_USER: fadefre824
  CI_COMMIT_TAG: latest
  DEPLOY_1_SERVER: 172.26.92.91
  DEPLOY_1_USER: swtp
  SSH_KNOWN_HOSTS_1: "172.26.92.91 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBP3TtNAESWwq9RwHvzH/ZCqsDKT5XCHNmmZDrexxuslv/4AIi2Mvm0WaWH4Iv93MB3nNVAdXtXiwawZQkXRSLLs="
  SSH_PRIVATE_KEY_1: "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\nQyNTUxOQAAACDnCz53HMApyAwVGp8zQMlrK96CF6Iuj/hI/e/numHscgAAAKhlT6JYZU+i\nWAAAAAtzc2gtZWQyNTUxOQAAACDnCz53HMApyAwVGp8zQMlrK96CF6Iuj/hI/e/numHscg\nAAAECVZ3FmbhT0RfqrPeW5i0aOV6yz3ybPJxw8/vocg27FGecLPnccwCnIDBUanzNAyWsr\n3oIXoi6P+Ej97+e6YexyAAAAIG55NjNmYWJpQHN0dWRzZXJ2LnVuaS1sZWlwemlnLmRlAQ\nIDBAU=\n-----END OPENSSH PRIVATE KEY-----"
  VITE_URL: http://172.26.92.91:8090
  DB_HOST: db
  DB_USERNAME: admin
  DB_PASSWORD: 123
  DB_PORT: 5432
  DB_NAME: development

# Wenn der Commit Tag nicht gesetzt ist wird er auf latest gesetzt
# workflow:
#   rules:
#     - if: $CI_COMMIT_TAG == ""
#       variables:
#         CI_COMMIT_TAG: "latest"
#     - when: always

stages:
  - test
  - build
  - deploy

test_frontend:
  stage: test
  image: node:21.1-alpine3.17
  when: manual
  script:
    - cd frontend/modulecrediting
    - npm install
    - npm run test

test_backend:
  stage: test
  image: public.ecr.aws/docker/library/maven:3.8.4-openjdk-17
  when: manual
  script:
    - cd backend/modulecrediting
    - mvn clean verify

  # services:
  #  - name: postgres:16.0-alpine
  #    alias: db
  #    variables:
  #      POSTGRES_PASSWORD: '$DB_PASSWORD'
  #      POSTGRES_USER: '$DB_USERNAME'
  #      POSTGRES_DB: '$DB_NAME'
  #    entrypoint: ['docker-entrypoint.sh']
  #    command: ['postgres']
  

# generate_javadoc:
#   stage: build
#   image: gradle:8.4.0-jdk17-alpine
#   script:
#     - cd creditport-backend
#     - gradle javadoc
#   artifacts:
#     paths:
#       - creditport-backend/build/docs/javadoc
#   only:
#     - developer


build_backend:
  stage: build
  #needs: ['test_backend']
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: ['']
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY_1\":{\"auth\":\"$(echo -n $CI_REGISTRY_1_USER:$CI_REGISTRY_1_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context "${CI_PROJECT_DIR}/backend/modulecrediting" --build-arg VITE_URL=$VITE_URL --dockerfile
      "${CI_PROJECT_DIR}/backend/modulecrediting/Dockerfile" --destination "${CI_REGISTRY_1_IMAGE_1}:backend-${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG'

build_frontend:
  stage: build
  #needs: ['test_frontend']
  when: manual
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: ['']
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY_1\":{\"auth\":\"$(echo -n $CI_REGISTRY_1_USER:$CI_REGISTRY_1_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context "${CI_PROJECT_DIR}/frontend/modulecrediting" --dockerfile "${CI_PROJECT_DIR}/frontend/modulecrediting/Dockerfile" --destination
      "${CI_REGISTRY_1_IMAGE_1}:frontend-${CI_COMMIT_TAG}"
  rules:
    - if: '$CI_COMMIT_TAG'


deploy:
  stage: deploy
  #needs: ['build_frontend', 'build_backend']
  when: manual
  image: nginx:1.25.3-alpine
  variables:
    DOCKER_HOST: ssh://$DEPLOY_1_USER@$DEPLOY_1_SERVER
  before_script:
    - apk update
    - apk add openssh docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_1" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS_1" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - echo $CI_REGISTRY_1_PASSWORD | docker login -u $CI_REGISTRY_1_USER --password-stdin $CI_REGISTRY_1
    - docker compose -f docker-compose-prod.yml stop frontend backend postgres
    - docker compose rm -f frontend backend postgres
    - docker compose -f docker-compose-prod.yml up -d frontend backend postgres